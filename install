#!/bin/bash

# doing some checking!

if [[ -d /sys/firmware/efi ]]; then
	echo "The system is UEFI!"
	echo "Starting the installer..."
	sleep 2
else
	echo "Its looks like your system is not UEFI"
	echo "Exiting the installer..."
	exit 1
fi

if [[ ! "${UID}" -eq 0 ]]; then
	echo "Are you a root user?"
	echo "Run me as root!"
    exit 1
fi

printf '\033c'

echo -ne "
=========================================================================================
                                  ___                                                ___
 _____ _____ _____ _____ _____   |  _| _____ _____ _____ _____   _ _____ _____ _____ |_  |
|   __|  _  | __  |     |  |  |  | |  |  |  |   __|   __|     | / |   __|   __|     |  | |
|   __|     |    -|   --|     |  | |  |  |  |   __|   __|-   -|/ /|   __|   __|-   -|  | |
|__|  |__|__|__|__|_____|__|__|  | |_ |_____|_____|__|  |_____|_/ |_____|__|  |_____| _| |
                                 |___|                                               |___|

=========================================================================================
                          Automated archlinux installer
                                   [UEFI/EFI]

=========================================================================================
"

#installer1

sed -i "s/^#ParallelDownloads = 5$/ParallelDownloads = 10/" /etc/pacman.conf
pacman -Sy archlinux-keyring
echo 'Enter your keymaps: '
read keymaps
loadkeys $keymaps

# timedate
timedatectl set-ntp true

# getting the best mirrorlist
pacman --noconfirm -Syyy
pacman --noconfirm -S reflector
echo 'Country name for mirrors: '
read mirrorsRegion
reflector -c $mirrorsRegion --threads 32 --delay 2 -p https,http --sort rate --save /etc/pacman.d/mirrorlist

# disk partition
umount -a # make sure all partition are unmounted
printf '\033c'
echo -ne "
========================================================================
    THIS WILL FORMAT AND DELETE THE DATA ON THE DISK!
    Please make sure you know what you are doing because
    after formating your disk there is no way to get data back
========================================================================
"
echo "Avabile drive: $(lsblk -n --output TYPE,KNAME,SIZE | awk '$1=="disk"{print "/dev/"$2" | "$3}')" 
echo 'Enter the drive: '
read driveToInstall
cfdisk $driveToInstall

# root
printf '\033c'
lsblk -n --output TYPE,KNAME,SIZE | awk '$1=="part"{print "/dev/"$2" | "$3}'
echo "Enter the root partition: "
read rootPartition
mkfs.ext4 $rootPartition
mount $rootPartition /mnt


# efi
printf '\033c'
read -p "Format/Create EFI partition? [y/n] " anwserCreateEfi
if [[ $anwserCreateEfi = y ]]; then
	lsblk -n --output TYPE,KNAME,SIZE | awk '$1=="part"{print "/dev/"$2" | "$3}'
	echo 'Enter EFI partition: '
	read efiPartition
	mkfs.fat -F32 $efiPartition
	mkdir /mnt/boot
	mount $efiPartition /mnt/boot
else
	echo "Select the partition"
	lsblk -n --output TYPE,KNAME,SIZE | awk '$1=="part"{print "/dev/"$2" | "$3}'
	echo "Enter your EFI partition: "
	read efiPart
	mkdir /mnt/boot
	mount $efiPart /mnt/boot
fi

# home
printf '\033c'
read -p "Did you also create home partition? [y/n] " answer
if [[ $answer = y ]] ; then
	lsblk -n --output TYPE,KNAME,SIZE | awk '$1=="part"{print "/dev/"$2" | "$3}'
	echo "Enter home patition: "
	read homePartition
	mkfs.ext4 $homePartition
	mkdir /mnt/home
	mount $homePartition /mnt/home
fi

cpuBrand=$(cat /proc/cpuinfo | grep 'vendor' | uniq | awk '{print $3}')
if [[ $cpuBrand = "GenuineIntel" ]]; then
        cpuUcode=intel-ucode
else
        cpuUcode=amd-ucode
fi

# installing base system
pacstrap /mnt base-devel base linux linux-firmware vim git $cpuUcode

# generate fstab
genfstab -U /mnt >> /mnt/etc/fstab
cat /mnt/etc/fstab

# arch-chroot
sed '1,/^#installer2$/d' `basename $0` > /mnt/farch-installer2.sh
chmod +x /mnt/farch-installer2.sh
arch-chroot /mnt ./farch-installer2.sh
umount -a
echo "Installation done!"
echo -ne '[-] Rebooting in 10 second\r'
sleep 1
echo -ne '[\] Rebooting in 9 second\r'
sleep 1
echo -ne '[|] Rebooting in 8 second\r'
sleep 1
echo -ne '[/] Rebooting in 7 second\r'
sleep 1
echo -ne '[-] Rebooting in 6 second\r'
sleep 1
echo -ne '[\] Rebooting in 5 second\r'
sleep 1
echo -ne '[|] Rebooting in 4 second\r'
sleep 1
echo -ne '[/] Rebooting in 3 second\r'
sleep 1
echo -ne '[-] Rebooting in 2 second\r'
sleep 1
echo -ne '[\] Rebooting in 1 second\r'
sleep 1
echo -ne '[|] Rebooting!\r'
reboot

#installer2
printf '\033c'
pacman -S --noconfirm sed
sed -i "s/^#ParallelDownloads = 5$/ParallelDownloads = 10/" /etc/pacman.conf

time_zone="$(curl -s --fail https://ipapi.co/timezone)"
echo "System detected your timezone to be '$time_zone' \n"
read -p "Is this correct? [y/n]" time_zone_answer
if [[ $time_zone_answer = y ]] ; then
	ln -sf /usr/share/zoneinfo/$time_zone /etc/localtime
else 
	echo 'Enter your timezone: '
	read fixTimezone
	ln -sf /usr/share/zoneinfo/$fixTimezone /etc/localtime
fi
hwclock --systohc
echo "en_US.UTF-8 UTF-8" >> /etc/locale.gen
locale-gen
echo "LANG=en_US.UTF-8" > /etc/locale.conf
echo "KEYMAP=us" > /etc/vconsole.conf
echo "Hostname: "
read hostname
echo $hostname > /etc/hostname
echo "127.0.0.1       localhost" >> /etc/hosts
echo "::1             localhost" >> /etc/hosts
echo "127.0.1.1       $hostname.localdomain $hostname" >> /etc/hosts

mkinitcpio -P 

# installing more package
pacman --noconfirm -S grub efibootmgr os-prober xdg-user-dirs networkmanager neofetch

# root password
echo 'Enter your root password: '
passwd

# install grub
echo 'grub target[i386-efi, x86_64-efi]: '
read grubTarget
grub-install --target=$grubTarget --efi-directory=/boot --bootloader-id=arch-grub
grub-mkconfig -o /boot/grub/grub.cfg

systemctl enable NetworkManager.service

# add normal user
echo 'Enter your username: '
read MyUsername
useradd -mG wheel $MyUsername
passwd $MyUsername
echo "%wheel ALL=(ALL) ALL" >> /etc/sudoers

read -p "Install Xorg, alsa, firefox, mpv? [y/n]" InstallOtherPkgs
if [[ $InstallOtherPkgs = y ]]; then
	echo "Installing packages"
	pacman -S --noconfirm alsa-utils alsa-firmware sof-firmware alsa-ucm-conf dunst libnotify firefox ffmpeg mpv xorg-bdftopcf xorg-docs xorg-font-util xorg-fonts-100dpi xorg-fonts-75dpi xorg-fonts-encodings xorg-iceauth xorg-mkfontscale xorg-server xorg-server-common xorg-server-devel xorg-server-xephyr xorg-server-xnest xorg-server-xvfb xorg-sessreg xorg-setxkbmap xorg-smproxy xorg-x11perf xorg-xauth xorg-xbacklight xorg-xcmsdb xorg-xcursorgen xorg-xdpyinfo xorg-xdriinfo xorg-xev xorg-xgamma xorg-xhost xorg-xinit xorg-xinput xorg-xkbcomp xorg-xkbevd xorg-xkbutils xorg-xkill xorg-xlsatoms xorg-xlsclients xorg-xmodmap xorg-xpr xorg-xrandr xorg-xrdb xorg-xrefresh xorg-xsetroot xorg-xvinfo xorg-xwayland xorg-xwd xorg-xwininfo xorg-xwud 
fi

gpu_type=$(lspci)
echo "Installing driver packages"
if grep -E "NVIDIA|GeForce" <<< ${gpu_type}; then
    pacman -S --noconfirm --needed nvidia
	nvidia-xconfig
elif lspci | grep 'VGA' | grep -E "Radeon|AMD"; then
    pacman -S --noconfirm --needed xf86-video-amdgpu
elif grep -E "Integrated Graphics Controller" <<< ${gpu_type}; then
    pacman -S --noconfirm --needed xf86-video-intel libva-intel-driver libvdpau-va-gl vulkan-intel libva-intel-driver libva-utils
elif grep -E "Intel Corporation" <<< ${gpu_type}; then
    pacman -S --needed --noconfirm xf86-video-intel libva-intel-driver libvdpau-va-gl vulkan-intel libva-intel-driver libva-utils
else 
	echo "Unrecognized GPU/No GPU detected"
fi

echo 'Base system installation done!'
echo 'run umount -a && reboot'
exit

